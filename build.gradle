plugins {
	id 'net.neoforged.moddev.legacyforge' version '2.0.95'
	id 'maven-publish'
}

version = "${mod_version}+${minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

legacyForge {
	version = "1.20.1-${forge_version}"

	validateAccessTransformers = true

	runs {
		client {
			client()
		}

		server {
			server()
		}

		data {
			data()
		}
	}

	mods {
		testproject {
			sourceSet sourceSets.main
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven { url = "https://maven.blamejared.com/" } // JEI
	maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
	maven { url = "https://api.modrinth.com/maven" } // LazyDFU
	maven { url = "https://mvn.devos.one/snapshots/" } // Create, Registrate
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://maven.tterrag.com/" } // Flywheel
	maven { url = "https://maven.covers1624.net/" } // CodeChickenLib
	maven { url = "https://jitpack.io/" } // Mixin Extras
	maven { url "https://cursemaven.com" }
}

dependencies {
	implementation "curse.maven:create-328085:${create_version}"
	implementation "com.tterrag.registrate:Registrate:MC${registrate_version}"

	switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
		case "jei":
			compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
			compileOnly "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"

			runtimeOnly "mezz.jei:jei-${minecraft_version}-forge:${jei_version}"
			break
		case "disabled": break
		default: println("Unknown recipe viewer specified: ${recipe_viewer}. Must be JEI or disabled.")
	}
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : mod_name,
				"Specification-Vendor"    : mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : mod_name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

processResources {
	Map<String, String> properties = Map.of(
			"version", version as String,
			"create_version", create_version as String,
			"minecraft_version", minecraft_version as String,
			"forge_version", forge_version as String
	)
	inputs.properties(properties)
	filesMatching("META-INF/mods.toml") {
		expand properties
	}
}

jar.finalizedBy('reobfJar')

publishing {
	publications {
		maven(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}